var relearn_search_index = [
  {
    "content": "+++ title = “My page” weight = 5 +++ date: 2023-02-04\nVMWARE 加网卡 (192.168.68.56 8c 8G)\nhttps://www.dpdk.org/\nhttp://doc.dpdk.org/guides-22.11/\n编辑对应的 jammy.vmx，修改所有e1000为vmxnet3 ，多队列网卡 ethernet0.virtualDev = \"vmxnet3\" ethernet0.wakeOnPcktRcv = \"true\" ... ethernet1.virtualDev = \"vmxnet3\" ethernet1.wakeOnPcktRcv = \"true\" ethernet2.virtualDev = \"vmxnet3\" ethernet2.wakeOnPcktRcv = \"true\" lshw -c network -businfo root@jammy:~# ip a ... 2: ens192: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0c:29:9f:04:74 brd ff:ff:ff:ff:ff:ff altname enp11s0 inet 192.168.68.56/24 brd 192.168.68.255 scope global ens192 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe9f:474/64 scope link valid_lft forever preferred_lft forever 3: ens224: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0c:29:9f:04:7e brd ff:ff:ff:ff:ff:ff altname enp19s0 4: ens256: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0c:29:9f:04:88 brd ff:ff:ff:ff:ff:ff altname enp27s0 apt install dpdk dpdk-dev -y vi /etc/default/grub GRUB_CMDLINE_LINUX=\"default_hugepagesz=1G hugepagesz=1G hugepages=4 iommu=pt intel_iommu=on\" #GRUB_CMDLINE_LINUX=\"default_hugepagesz=1G hugepagesz=1G hugepages=4 isolcpus=2-3 iommu=pt intel_iommu=on\" update-grub # grub2-mkconfig -o /boot/grub2/grub.cfg reboot ## dmesg | grep -e DMAR -e IOMMU cat /proc/cmdline | grep -e iommu=pt -e intel_iommu=on -e huge dmesg| grep -i iommu cat /proc/meminfo | grep Huge lscpu | grep NUMA dpdk-hugepages.py -s dpdk-devbind.py -s lshw -businfo -c network root@dpdk56:~# lshw -businfo -c network Bus info Device Class Description ==================================================== pci@0000:0b:00.0 ens192 network VMXNET3 Ethernet Controller pci@0000:13:00.0 ens224 network VMXNET3 Ethernet Controller pci@0000:1b:00.0 ens256 network VMXNET3 Ethernet Controller dmesg| grep -i iommu | grep -e 0000:0b:00.0 -e 0000:13:00.0 -e 0000:1b:00.0 root@dpdk56:~# dmesg| grep -i iommu | grep -e 0000:0b:00.0 -e 0000:13:00.0 -e 0000:1b:00.0 [ 2.723136] pci 0000:0b:00.0: Adding to iommu group 6 [ 2.723277] pci 0000:13:00.0: Adding to iommu group 7 [ 2.723432] pci 0000:1b:00.0: Adding to iommu group 8 root@jammy:~ # dpdk-devbind.py -s Network devices using kernel driver =================================== 0000:0b:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens192 drv=vmxnet3 unused=vfio-pci *Active* 0000:13:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens224 drv=vmxnet3 unused=vfio-pci 0000:1b:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens256 drv=vmxnet3 unused=vfio-pci dpdk-devbind.py -b vfio-pci 0000:13:00.0 0000:1b:00.0 # dpdk-devbind.py -b vfio-pci 0000:13:00.0 # dpdk-devbind.py -b vfio-pci 0000:1b:00.0 dpdk-devbind.py -s Network devices using DPDK-compatible driver ============================================ 0000:13:00.0 'VMXNET3 Ethernet Controller 07b0' drv=vfio-pci unused=vmxnet3 0000:1b:00.0 'VMXNET3 Ethernet Controller 07b0' drv=vfio-pci unused=vmxnet3 Network devices using kernel driver =================================== 0000:0b:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens192 drv=vmxnet3 unused=vfio-pci *Active* dpdk-hugepages.py -s root@jammy:~ # dpdk-hugepages.py -s Node Pages Size Total 0 4 1Gb 4Gb Hugepages mounted on /dev/hugepages ### build pkten export https_proxy=http://10.1.1.12:8118 wget https://github.com/pktgen/Pktgen-DPDK/archive/refs/tags/pktgen-22.07.1.tar.gz tar zxvf pktgen-22.07.1.tar.gz cd Pktgen-DPDK-pktgen-22.07.1 meson build cd build ninja 编译完毕后的pkten在[Pktgen dir]/build/app/pktgen ## 源码BUILD dpdk apt install -y build-essential ## pip3 install meson ninja apt install meson python3-pyelftools pkg-config libnuma-dev export http_proxy=http://10.1.1.12:8118 wget http://fast.dpdk.org/rel/dpdk-22.11.1.tar.xz tar Jxvf dpdk-22.11.1.tar.xz cd dpdk-stable-22.11.1 meson setup -Dexamples=all build cd build ninja # ninja install ### 因为 apt install dpdk dpdk-dev -y ./pktgen -l 1-3 -n 2 -- -T -P -m \"2.0,3.1\" -l: 使用CPU Cores 1、2、3 -n: 内存通道 --：此符号前是DPDK的配置参数，此符号后是DPDK Application的配置参数，此处即是Pktgen的参数 -T: 启用彩色文本输出 -P: Enable PROMISCUOUS mode on all ports -m string: 重点！指定cpu core与NIC的绑定关系，格式参照下图： VM1 (56) \u003c--------\u003e VM2 (57) root@dpdk56:~# ip a 2: ens192: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0c:29:9f:04:74 brd ff:ff:ff:ff:ff:ff altname enp11s0 inet 192.168.68.56/24 brd 192.168.68.255 scope global ens192 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe9f:474/64 scope link valid_lft forever preferred_lft forever 3: ens224: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0c:29:9f:04:7e brd ff:ff:ff:ff:ff:ff altname enp19s0 4: ens256: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0c:29:9f:04:88 brd ff:ff:ff:ff:ff:ff altname enp27s0 root@dpdk57:~# ip a 2: ens192: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:0c:29:22:de:b7 brd ff:ff:ff:ff:ff:ff altname enp11s0 inet 192.168.68.57/24 brd 192.168.68.255 scope global ens192 valid_lft forever preferred_lft forever inet6 fe80::20c:29ff:fe22:deb7/64 scope link valid_lft forever preferred_lft forever 3: ens224: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0c:29:22:de:c1 brd ff:ff:ff:ff:ff:ff altname enp19s0 4: ens256: \u003cBROADCAST,MULTICAST\u003e mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 00:0c:29:22:de:cb brd ff:ff:ff:ff:ff:ff altname enp27s0 dpdk-devbind.py -b vfio-pci 0000:13:00.0 dpdk-devbind.py -s 00:0c:29:9f:04:7e (vm1 ens224) --- 00:0c:29:22:de:c1 (vm2 ens224) vm1:\nroot@dpdk56:~# /root/Pktgen-DPDK-pktgen-22.07.1/build/app/pktgen -l 0-1 -n 3 -- -T -P -m \"1.0\" set 0 dst mac 00:0c:29:22:de:c1 set 0 count 100000 str vm2:\nroot@dpdk57:~# dpdk-testpmd -l 0-1 -n 1 -- -i set fwd rxonly show port stats all clear port stats all start vm1: vm2: dpdk-l2fwd vm2:\ndpdk-devbind.py -b vfio-pci 0000:13:00.0 dpdk-devbind.py -b vfio-pci 0000:1b:00.0 root@dpdk57:~/dpdk-stable-22.11.1/build/examples# ./dpdk-l2fwd -l 0-3 -n 4 -- -q 1 -p 0x3 vm1:\ndpdk-devbind.py -b vfio-pci 0000:13:00.0 root@dpdk56:~# /root/Pktgen-DPDK-pktgen-22.07.1/build/app/pktgen -l 0-1 -n 4 -- -T -P -m \"1.0\" set 0 dst mac 00:0c:29:22:de:c1 set 0 count 1000 start 0 vm2: vm1: ",
    "description": "",
    "tags": null,
    "title": "1. vmware-dpdk",
    "uri": "/dpdk/1.vmware-dpdk/index.html"
  },
  {
    "content": "+++ title = “My page” weight = 3 +++ date: 2023-02-04 HOST: 10.1.1.12, guest: j1210 10.1.5.110\nroot@junnan-gpu:/u01/vms/j1210# more vm.xml \u003cdomain type='kvm'\u003e \u003cname\u003ej1210\u003c/name\u003e \u003cvcpu current='8'\u003e24\u003c/vcpu\u003e \u003cmemory\u003e8388608\u003c/memory\u003e \u003cos\u003e \u003ctype arch='x86_64' machine='pc'\u003ehvm\u003c/type\u003e \u003cbootmenu enable='yes'/\u003e \u003c/os\u003e \u003cfeatures\u003e \u003cacpi/\u003e \u003capic/\u003e \u003cpae/\u003e \u003c/features\u003e \u003ccpu mode=\"host-passthrough\" check=\"none\" migratable=\"on\"/\u003e \u003cclock offset='utc'/\u003e \u003con_poweroff\u003edestroy\u003c/on_poweroff\u003e \u003con_reboot\u003erestart\u003c/on_reboot\u003e \u003con_crash\u003edestroy\u003c/on_crash\u003e \u003cdevices\u003e \u003cemulator\u003e/usr/bin/kvm\u003c/emulator\u003e \u003cdisk type='file' device='disk'\u003e \u003cdriver name='qemu' type='qcow2'/\u003e \u003csource file='/u01/vms/j1210/disk'/\u003e \u003ctarget dev='vda' bus='virtio'/\u003e \u003cboot order='1'/\u003e \u003c/disk\u003e \u003cinterface type='bridge'\u003e \u003csource bridge='br0'/\u003e \u003cmodel type='virtio'/\u003e \u003c/interface\u003e \u003cinterface type='network'\u003e \u003csource network='default'/\u003e \u003cmodel type='e1000'/\u003e \u003c/interface\u003e \u003cinterface type='network'\u003e \u003csource network='default'/\u003e \u003cmodel type='e1000'/\u003e \u003c/interface\u003e \u003cserial type='pty'\u003e \u003ctarget port='0'/\u003e \u003c/serial\u003e \u003cconsole type='pty'\u003e \u003ctarget type='serial' port='0'/\u003e \u003c/console\u003e \u003cgraphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'/\u003e \u003cvideo\u003e \u003cmodel type='cirrus' vram='65536' heads='1'/\u003e \u003c/video\u003e \u003cinput type='tablet' bus='usb'/\u003e \u003cinput type='mouse' bus='ps2'/\u003e \u003c/devices\u003e \u003c/domain\u003e \u003cinterface type='bridge'\u003e \u003csource bridge='br0'/\u003e \u003cmodel type='virtio'/\u003e \u003c/interface\u003e \u003cinterface type='network'\u003e \u003csource network='default'/\u003e \u003cmodel type='e1000'/\u003e \u003c/interface\u003e \u003cinterface type='network'\u003e \u003csource network='default'/\u003e \u003cmodel type='e1000'/\u003e \u003c/interface\u003e vi /etc/default/grub GRUB_CMDLINE_LINUX=\"default_hugepagesz=1G hugepagesz=1G hugepages=4\" #GRUB_CMDLINE_LINUX=\"default_hugepagesz=1G hugepagesz=1G hugepages=4 isolcpus=2-3 iommu=pt intel_iommu=on\" update-grub apt install dpdk dpdk-dev -y root@ubuntu:~# dpdk-devbind.py -s Network devices using kernel driver =================================== 0000:00:03.0 'Virtio network device 1000' if=ens3 drv=virtio-pci unused=vfio-pci *Active* 0000:00:04.0 '82540EM Gigabit Ethernet Controller 100e' if=ens4 drv=e1000 unused=vfio-pci 0000:00:05.0 '82540EM Gigabit Ethernet Controller 100e' if=ens5 drv=e1000 unused=vfio-pci root@ubuntu:~# dpdk-devbind.py -b vfio-pci 0000:00:04.0 Error: bind failed for 0000:00:04.0 - Cannot bind to driver vfio-pci: [Errno 22] Invalid argument Error: unbind failed for 0000:00:04.0 - Cannot open /sys/bus/pci/drivers//unbind: [Errno 13] Permission denied: '/sys/bus/pci/drivers//unbind' root@ubuntu:~# cat /sys/module/vfio/parameters/enable_unsafe_noiommu_mode N root@ubuntu:~# echo 1 \u003e /sys/module/vfio/parameters/enable_unsafe_noiommu_mode echo 1 \u003e /sys/module/vfio/parameters/enable_unsafe_noiommu_mode root@ubuntu:~# cat /sys/module/vfio/parameters/enable_unsafe_noiommu_mode Y root@ubuntu:~# dpdk-devbind.py -b vfio-pci 0000:00:04.0 root@ubuntu:~# dpdk-devbind.py -b vfio-pci 0000:00:05.0 root@ubuntu:~# dpdk-devbind.py -s Network devices using DPDK-compatible driver ============================================ 0000:00:04.0 '82540EM Gigabit Ethernet Controller 100e' drv=vfio-pci unused=e1000 0000:00:05.0 '82540EM Gigabit Ethernet Controller 100e' drv=vfio-pci unused=e1000 Network devices using kernel driver =================================== 0000:00:03.0 'Virtio network device 1000' if=ens3 drv=virtio-pci unused=vfio-pci *Active* root@ubuntu:~# dpdk-testpmd -l0-3 -- -i --nb-cores=2 --nb-ports=2 --total-num-mbufs=2048 ... start ... stop # top 会看到 2cpu 100%us 或者：\nroot@ubuntu:~# dpdk-devbind.py -s Network devices using kernel driver =================================== 0000:00:03.0 'Virtio network device 1000' if=ens3 drv=virtio-pci unused=vfio-pci *Active* 0000:00:04.0 '82540EM Gigabit Ethernet Controller 100e' if=ens4 drv=e1000 unused=vfio-pci 0000:00:05.0 '82540EM Gigabit Ethernet Controller 100e' if=ens5 drv=e1000 unused=vfio-pci apt install dpdk-kmods-dkms # 安装igb_uio modprobe igb_uio root@ubuntu:~# dpdk-devbind.py -s Network devices using kernel driver =================================== 0000:00:03.0 'Virtio network device 1000' if=ens3 drv=virtio-pci unused=igb_uio,vfio-pci *Active* 0000:00:04.0 '82540EM Gigabit Ethernet Controller 100e' if=ens4 drv=e1000 unused=igb_uio,vfio-pci 0000:00:05.0 '82540EM Gigabit Ethernet Controller 100e' if=ens5 drv=e1000 unused=igb_uio,vfio-pci root@ubuntu:~# dpdk-devbind.py -b igb_uio 0000:00:04.0 root@ubuntu:~# dpdk-devbind.py -b igb_uio 0000:00:05.0 root@ubuntu:~# dpdk-devbind.py -s Network devices using DPDK-compatible driver ============================================ 0000:00:04.0 '82540EM Gigabit Ethernet Controller 100e' drv=igb_uio unused=e1000,vfio-pci 0000:00:05.0 '82540EM Gigabit Ethernet Controller 100e' drv=igb_uio unused=e1000,vfio-pci Network devices using kernel driver =================================== 0000:00:03.0 'Virtio network device 1000' if=ens3 drv=virtio-pci unused=igb_uio,vfio-pci *Active* root@ubuntu:~# dpdk-testpmd -l0-3 -- -i --nb-cores=2 --nb-ports=2 --total-num-mbufs=2048 ... start ... stop # top 会看到 2cpu 100%us # build apt install build-essential pip3 install meson ninja apt install meson python3-pyelftools pkg-config libnuma-dev wget http://fast.dpdk.org/rel/dpdk-22.11.1.tar.xz tar Jxvf dpdk-22.11.1.tar.xz cd dpdk-stable-22.11.1 meson setup -Dexamples=all build cd build ninja ninja install root@junnan-gpu:~# ll /usr/bin/kvm lrwxrwxrwx 1 root root 18 12月 8 17:17 /usr/bin/kvm -\u003e qemu-system-x86_64* root@junnan-gpu:~# qemu-system-x86_64 --version QEMU emulator version 6.2.0 (Debian 1:6.2+dfsg-2ubuntu6.6) Copyright (c) 2003-2021 Fabrice Bellard and the QEMU Project developers root@junnan-gpu:~# qemu-system-x86_64 -device ? ... Network devices: name \"e1000\", bus PCI, alias \"e1000-82540em\", desc \"Intel Gigabit Ethernet\" name \"e1000-82544gc\", bus PCI, desc \"Intel Gigabit Ethernet\" name \"e1000-82545em\", bus PCI, desc \"Intel Gigabit Ethernet\" name \"e1000e\", bus PCI, desc \"Intel 82574L GbE Controller\" name \"i82550\", bus PCI, desc \"Intel i82550 Ethernet\" name \"i82551\", bus PCI, desc \"Intel i82551 Ethernet\" name \"i82557a\", bus PCI, desc \"Intel i82557A Ethernet\" name \"i82557b\", bus PCI, desc \"Intel i82557B Ethernet\" name \"i82557c\", bus PCI, desc \"Intel i82557C Ethernet\" name \"i82558a\", bus PCI, desc \"Intel i82558A Ethernet\" name \"i82558b\", bus PCI, desc \"Intel i82558B Ethernet\" name \"i82559a\", bus PCI, desc \"Intel i82559A Ethernet\" name \"i82559b\", bus PCI, desc \"Intel i82559B Ethernet\" name \"i82559c\", bus PCI, desc \"Intel i82559C Ethernet\" name \"i82559er\", bus PCI, desc \"Intel i82559ER Ethernet\" name \"i82562\", bus PCI, desc \"Intel i82562 Ethernet\" name \"i82801\", bus PCI, desc \"Intel i82801 Ethernet\" name \"ne2k_isa\", bus ISA name \"ne2k_pci\", bus PCI name \"pcnet\", bus PCI name \"pvrdma\", bus PCI, desc \"RDMA Device\" name \"rocker\", bus PCI, desc \"Rocker Switch\" name \"rtl8139\", bus PCI name \"tulip\", bus PCI name \"usb-net\", bus usb-bus name \"virtio-net-device\", bus virtio-bus name \"virtio-net-pci\", bus PCI, alias \"virtio-net\" name \"virtio-net-pci-non-transitional\", bus PCI name \"virtio-net-pci-transitional\", bus PCI name \"vmxnet3\", bus PCI, desc \"VMWare Paravirtualized Ethernet v3\" ... 所以可以修改 e1000 --\u003e vmxnet3 \u003cinterface type='bridge'\u003e \u003csource bridge='br0'/\u003e \u003cmodel type='vmxnet3'/\u003e \u003c/interface\u003e \u003cinterface type='bridge'\u003e \u003csource bridge='br0'/\u003e \u003cmodel type='vmxnet3'/\u003e \u003c/interface\u003e \u003cinterface type='bridge'\u003e \u003csource bridge='br0'/\u003e \u003cmodel type='vmxnet3'/\u003e \u003c/interface\u003e # u22.04 10.1.5.161 ######### 0.prepare apt update apt -y full-upgrade ln -sf ../usr/share/zoneinfo/Asia/Shanghai /etc/localtime [ -f /var/run/reboot-required ] \u0026\u0026 reboot -f ######### 1. 启用rc.local cat \u003c\u003c EOF \u003e\u003e /etc/rc.local #!/bin/bash echo 1 \u003e /sys/module/vfio/parameters/enable_unsafe_noiommu_mode EOF chmod +x /etc/rc.local cat \u003c\u003c EOF \u003e\u003e /lib/systemd/system/rc-local.service [Install] WantedBy=multi-user.target EOF cat /lib/systemd/system/rc-local.service # 启用服务 systemctl enable rc-local systemctl start rc-local systemctl status rc-local # 查看是否成功 cat /sys/module/vfio/parameters/enable_unsafe_noiommu_mode echo \"vfio-pci\" \u003e /etc/modules-load.d/95-vpp.conf ######### 2. hugepages cat \u003c\u003cEOF \u003e\u003e /etc/sysctl.conf vm.nr_hugepages = 2048 EOF sysctl -p ######### 3. dpdk apt install dpdk dpdk-dev -y dpdk-devbind.py -s dpdk-devbind.py -b vfio-pci 0000:00:04.0 dpdk-devbind.py -b vfio-pci 0000:00:05.0 root@ubuntu:~# dpdk-devbind.py -s Network devices using kernel driver =================================== 0000:00:03.0 'VMXNET3 Ethernet Controller 07b0' if=ens3 drv=vmxnet3 unused=vfio-pci *Active* 0000:00:04.0 'VMXNET3 Ethernet Controller 07b0' if=ens4 drv=vmxnet3 unused=vfio-pci 0000:00:05.0 'VMXNET3 Ethernet Controller 07b0' if=ens5 drv=vmxnet3 unused=vfio-pci root@ubuntu:~# dpdk-devbind.py -s Network devices using DPDK-compatible driver ============================================ 0000:00:04.0 'VMXNET3 Ethernet Controller 07b0' drv=vfio-pci unused=vmxnet3 0000:00:05.0 'VMXNET3 Ethernet Controller 07b0' drv=vfio-pci unused=vmxnet3 Network devices using kernel driver =================================== 0000:00:03.0 'VMXNET3 Ethernet Controller 07b0' if=ens3 drv=vmxnet3 unused=vfio-pci *Active* apt install docker.io -y docker pull ubuntu:22.04 cat \u003c\u003c EOF \u003e Dockerfile FROM ubuntu:22.04 RUN sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list \u0026\u0026 \\ sed -i 's/security.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list RUN apt-get update -y \u0026\u0026 \\ apt-get install dpdk kmod -y EOF docker build -t amwork2010/dpdk:1 . docker run --privileged \\ -v /sys/bus/pci/devices:/sys/bus/pci/devices \\ -v /sys/kernel/mm/hugepages:/sys/kernel/mm/hugepages \\ -v /sys/devices/system/node:/sys/devices/system/node \\ -v /lib/modules:/lib/modules \\ -v /dev:/dev \\ -it amwork2010/dpdk:1 bash docker run --privileged \\ -v /lib/modules:/lib/modules \\ -it amwork2010/dpdk:1 bash 也可以banding , kmod ： the kmod package would provide modinfo, modprobe and other related tools. root@714c8d6fc89e:/# modprobe vfio-pci modprobe: FATAL: Module vfio-pci not found in directory /lib/modules/5.15.0-58-generic so: -v /lib/modules:/lib/modules ",
    "description": "",
    "tags": null,
    "title": "2. qemu-dpdk",
    "uri": "/dpdk/2.qemu-dpdk/index.html"
  },
  {
    "content": "date: 2023-02-04 192.168.68.56、 192.168.68.57\napt install -y openvswitch-switch-dpdk update-alternatives --set ovs-vswitchd /usr/lib/openvswitch-switch-dpdk/ovs-vswitchd-dpdk ovs-vswitchd --version systemctl restart openvswitch-switch.service root@dpdk56:~# ovs-vswitchd --version ovs-vswitchd (Open vSwitch) 2.17.3 DPDK 21.11.2 root@dpdk56:~# dpdk-devbind.py -s Network devices using kernel driver =================================== 0000:0b:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens192 drv=vmxnet3 unused=vfio-pci *Active* 0000:13:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens224 drv=vmxnet3 unused=vfio-pci 0000:1b:00.0 'VMXNET3 Ethernet Controller 07b0' if=ens256 drv=vmxnet3 unused=vfio-pci dpdk-devbind.py -b vfio-pci 0000:13:00.0 0000:1b:00.0 root@dpdk56:~# dpdk-devbind.py -b vfio-pci 0000:13:00.0 0000:1b:00.0 root@dpdk56:~# dpdk-devbind.py -s Network devices using DPDK-compatible driver ============================================ 0000:13:00.0 'VMXNET3 Ethernet Controller 07b0' drv=vfio-pci unused=vmxnet3 0000:1b:00.0 'VMXNET3 Ethernet Controller 07b0' drv=vfio-pci unused=vmxnet3 ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem=\"1024,0\" ### 只有一个numa node0 ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask=0x2 ### 0b0010 --\u003e Cpu1 ovs-vsctl set Open_vSwitch . other_config:pmd-cpu-mask=0x4 ### 0b0100 --\u003e Cpu2 ovs-vsctl get Open_vSwitch . dpdk_initialized ovs-vsctl get Open_vSwitch . dpdk_version # dpdk-init 指定 OVS 是否应该初始化并支持 DPDK 端口。该字段可以是true或try。值true将导致 ovs-vswitchd 进程在初始化失败时中止。值try表示即使 EAL 初始化失败，ovs-vswitchd 进程也应该继续运行。 # dpdk-lcore-mask 指定应该生成 dpdk lcore 线程的 CPU 核心，并需要十六进制字符串（例如“0x123”）。 # dpdk-socket-mem 逗号分隔的内存列表，用于从特定套接字上的大页面中预分配。如果未指定，则默认情况下不会设置此选项。将使用 DPDK 默认值。 # dpdk-hugepage-dir hugetlbfs挂载目录 # vhost-sock-dir 设置虚拟主机用户 unix 套接字文件路径的选项。 root@dpdk56:~# ovs-vsctl list open_vswitch _uuid : 6b97fe90-77a5-4a61-a8b6-0b74ed9f803d bridges : [db9afd87-ad4d-4d1a-842a-3e2eb21abf9e] cur_cfg : 12 datapath_types : [netdev, system] datapaths : {} db_version : \"8.3.0\" dpdk_initialized : true dpdk_version : \"DPDK 21.11.2\" external_ids : {hostname=dpdk56, rundir=\"/var/run/openvswitch\", system-id=\"921fb59b-cbab-4609-929b-875d5dedb844\"} iface_types : [bareudp, dpdk, dpdkvhostuser, dpdkvhostuserclient, erspan, geneve, gre, gtpu, internal, ip6erspan, ip6gre, lisp, patch, stt, system, tap, vxlan] manager_options : [] next_cfg : 12 other_config : {dpdk-init=\"true\", dpdk-lcore-mask=\"0x2\", dpdk-socket-mem=\"1024,0\", pmd-cpu-mask=\"0x4\"} ovs_version : \"2.17.3\" ssl : [] statistics : {} system_type : ubuntu system_version : \"22.04\" ovs-vsctl add-br br0 -- set bridge br0 datapath_type=netdev ovs-vsctl add-port br0 dpdk-p0 -- set Interface dpdk-p0 type=dpdk options:dpdk-devargs=0000:13:00.0 ovs-vsctl add-port br0 dpdk-p1 -- set Interface dpdk-p1 type=dpdk options:dpdk-devargs=0000:1b:00.0 root@dpdk56:~# ovs-vsctl show 6b97fe90-77a5-4a61-a8b6-0b74ed9f803d Bridge br0 datapath_type: netdev Port dpdk-p1 Interface dpdk-p1 type: dpdk options: {dpdk-devargs=\"0000:1b:00.0\"} Port dpdk-p0 Interface dpdk-p0 type: dpdk options: {dpdk-devargs=\"0000:13:00.0\"} Port br0 Interface br0 type: internal ovs_version: \"2.17.3\" 借助 pmd 多线程支持，OVS 默认为每个 NUMA 节点创建一个 pmd 线程，前提是该 NUMA 节点至少有一个 DPDK 接口添加到 OVS。 但是，在有多个端口/rxq 产生流量的情况下，可以通过创建在不同内核上运行的多个 pmd 线程来提高性能。 这些 pmd 线程可以通过各自负责不同的端口/rxq 来分担工作量。将端口/rxq 分配给 pmd 线程是自动完成的。 掩码中的设置位意味着创建了一个 pmd 线程并将其固定到相应的 CPU 内核。例如，要在核心 1 和 2 上运行 pmd 线程：0x110 = 0x6 ovs-vsctl set Open_vSwitch . other_config:pmd-cpu-mask=0x6 在 DPDK 端口添加到交换机后，轮询线程不断轮询 DPDK 设备并消耗 100% 的核心，可以从top和 ps命令中检查： $ top -H $ ps -eLo pid,psr,comm | grep pmd # To stop ovs-vswitchd \u0026 delete bridge, run: $ ovs-appctl -t ovs-vswitchd exit $ ovs-appctl -t ovsdb-server exit $ ovs-vsctl del-br br0 # 在笔记本T480上，跑一个还勉强，跑2个基本夯住了，跑不动。 ",
    "description": "",
    "tags": null,
    "title": "3. ovs-dpdk vmware",
    "uri": "/dpdk/3.ovs-dpdk.vmware/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "amwork2010 blog",
    "uri": "/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "dpdk",
    "uri": "/categories/dpdk/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "DPDKs",
    "uri": "/dpdk/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
